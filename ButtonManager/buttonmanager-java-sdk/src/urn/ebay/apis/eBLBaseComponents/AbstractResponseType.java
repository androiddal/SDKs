package urn.ebay.apis.eBLBaseComponents;
import urn.ebay.apis.eBLBaseComponents.AckCodeType;
import java.util.List;
import java.util.ArrayList;
import urn.ebay.apis.eBLBaseComponents.ErrorType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.NamedNodeMap;
import java.io.FileInputStream;
import java.io.StringReader;
import java.io.IOException;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Base type definition of a response payload that can carry
 * any type of payload content with following optional
 * elements: - timestamp of response message, - application
 * level acknowledgement, and - application-level errors and
 * warnings. 
 */
public class AbstractResponseType{


	/**
	 * This value represents the date and time (GMT) when the
	 * response was generated by a service provider (as a result of
	 * processing of a request). 	 
	 */ 
	private String Timestamp;

	/**
	 * Application level acknowledgement code. 	 
	 */ 
	private AckCodeType Ack;

	/**
	 * CorrelationID may be used optionally with an application
	 * level acknowledgement. 	 
	 */ 
	private String CorrelationID;

	/**
	 * 	 
	 */ 
	private List<ErrorType> Errors = new ArrayList<ErrorType>();

	/**
	 * This refers to the version of the response payload schema. 	 
	 */ 
	private String Version;

	/**
	 * This refers to the specific software build that was used in
	 * the deployment for processing the request and generating the
	 * response. 	 
	 */ 
	private String Build;

	

	/**
	 * Default Constructor
	 */
	public AbstractResponseType (){
	}	

	/**
	 * Getter for Timestamp
	 */
	 public String getTimestamp() {
	 	return Timestamp;
	 }
	 
	/**
	 * Setter for Timestamp
	 */
	 public void setTimestamp(String Timestamp) {
	 	this.Timestamp = Timestamp;
	 }
	 
	/**
	 * Getter for Ack
	 */
	 public AckCodeType getAck() {
	 	return Ack;
	 }
	 
	/**
	 * Setter for Ack
	 */
	 public void setAck(AckCodeType Ack) {
	 	this.Ack = Ack;
	 }
	 
	/**
	 * Getter for CorrelationID
	 */
	 public String getCorrelationID() {
	 	return CorrelationID;
	 }
	 
	/**
	 * Setter for CorrelationID
	 */
	 public void setCorrelationID(String CorrelationID) {
	 	this.CorrelationID = CorrelationID;
	 }
	 
	/**
	 * Getter for Errors
	 */
	 public List<ErrorType> getErrors() {
	 	return Errors;
	 }
	 
	/**
	 * Setter for Errors
	 */
	 public void setErrors(List<ErrorType> Errors) {
	 	this.Errors = Errors;
	 }
	 
	/**
	 * Getter for Version
	 */
	 public String getVersion() {
	 	return Version;
	 }
	 
	/**
	 * Setter for Version
	 */
	 public void setVersion(String Version) {
	 	this.Version = Version;
	 }
	 
	/**
	 * Getter for Build
	 */
	 public String getBuild() {
	 	return Build;
	 }
	 
	/**
	 * Setter for Build
	 */
	 public void setBuild(String Build) {
	 	this.Build = Build;
	 }
	 


	private  boolean isWhitespaceNode(Node n) {
		if (n.getNodeType() == Node.TEXT_NODE) {
			String val = n.getNodeValue();
			return val.trim().length() == 0;
		} else if (n.getNodeType() == Node.ELEMENT_NODE ){
			return (n.getChildNodes().getLength() == 0);
		} else {
			return false;
		}
	}
	
	private String convertToXML(Node n){
		String name = n.getNodeName();
		short type = n.getNodeType();
		if (Node.CDATA_SECTION_NODE == type) {
			return "<![CDATA[" + n.getNodeValue() + "]]&gt;";
		}
		if (name.startsWith("#")) {
			return "";
		}
		StringBuffer sb = new StringBuffer();
		sb.append("<").append(name);
		NamedNodeMap attrs = n.getAttributes();
		if (attrs != null) {
			for (int i = 0; i < attrs.getLength(); i++) {
				Node attr = attrs.item(i);
				sb.append(" ").append(attr.getNodeName()).append("=\"").append(attr.getNodeValue()).append("\"");
			}
		}
		String textContent = null;
		NodeList children = n.getChildNodes();
		if (children.getLength() == 0) {
			if (((textContent = n.getTextContent())) != null && (!"".equals(textContent))) {
				sb.append(textContent).append("</").append(name).append(">");
			} else {
				sb.append("/>");
			}
		} else {
			sb.append(">");
			boolean hasValidChildren = false;
			for (int i = 0; i < children.getLength(); i++) {
				String childToString = convertToXML(children.item(i));
				if (!"".equals(childToString)) {
					sb.append(childToString);
					hasValidChildren = true;
				}
			}
			if (!hasValidChildren && ((textContent = n.getTextContent()) != null)) {
				sb.append(textContent);
			}
			sb.append("</").append(name).append(">");
		}
		return sb.toString();
	}
	
	public AbstractResponseType(Object xmlSoap) throws IOException, SAXException, ParserConfigurationException {
		DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = builderFactory.newDocumentBuilder();
		InputSource inStream = new InputSource();
		inStream.setCharacterStream(new StringReader((String)xmlSoap));
		Document document = builder.parse(inStream);
		NodeList nodeList= null;
		
		String xmlString = "";
		if (document.getElementsByTagName("Timestamp").getLength() != 0) {
			if(!isWhitespaceNode(document.getElementsByTagName("Timestamp").item(0))) {
				this.Timestamp = (String)document.getElementsByTagName("Timestamp").item(0).getTextContent();
			}
		}
	
		if(document.getElementsByTagName("Ack").getLength() != 0) {
			if(!isWhitespaceNode(document.getElementsByTagName("Ack").item(0))) {
				this.Ack = AckCodeType.fromValue(document.getElementsByTagName("Ack").item(0).getTextContent());
			}
		}
		if (document.getElementsByTagName("CorrelationID").getLength() != 0) {
			if(!isWhitespaceNode(document.getElementsByTagName("CorrelationID").item(0))) {
				this.CorrelationID = (String)document.getElementsByTagName("CorrelationID").item(0).getTextContent();
			}
		}
	
		if (document.getElementsByTagName("Errors").getLength() != 0) {
			if(!isWhitespaceNode(document.getElementsByTagName("Errors").item(0))) {
				nodeList = document.getElementsByTagName("Errors");
				for(int i=0; i < nodeList.getLength(); i++) {
					xmlString = convertToXML(nodeList.item(i));
					this.Errors.add(new ErrorType(xmlString));
				}
			}
		}
		if (document.getElementsByTagName("Version").getLength() != 0) {
			if(!isWhitespaceNode(document.getElementsByTagName("Version").item(0))) {
				this.Version = (String)document.getElementsByTagName("Version").item(0).getTextContent();
			}
		}
	
		if (document.getElementsByTagName("Build").getLength() != 0) {
			if(!isWhitespaceNode(document.getElementsByTagName("Build").item(0))) {
				this.Build = (String)document.getElementsByTagName("Build").item(0).getTextContent();
			}
		}
	
	}
 
}